#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status

# Request sudo privileges at the beginning
# This will prompt for password and maintain sudo privileges throughout the script
echo "This script requires sudo privileges. Please enter your password if prompted."
sudo -v

# Determine script directory (works even with symlinks)
SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Display script banner
display_banner() {
  echo -e "\e[33m
██████  ███████ ████████ ██ ███    ██ ███████ ███    ██ ███████
██   ██ ██         ██    ██ ████   ██ ██      ████   ██ ██
██████  █████      ██    ██ ██ ██  ██ █████   ██ ██  ██ ███████
██   ██ ██         ██    ██ ██  ██ ██ ██      ██  ██ ██      ██
██   ██ ███████    ██    ██ ██   ████ ███████ ██   ████ ███████
\e[0m"
  echo -e "New \e[33mLaravel\e[0m project script\n"
}

# Load environment variables if file exists
load_env() {
  if [ -f "$SCRIPTS_DIR/dotenv" ]; then
    source "$SCRIPTS_DIR/dotenv"
  else
    echo -e "\e[33mWarning:\e[0m dotenv file not found at $SCRIPTS_DIR/dotenv"
  fi
}

# Run utility scripts if they exist
run_utility() {
  local script="$SCRIPTS_DIR/$1"
  if [ -f "$script" ]; then
    "$script"
  else
    echo -e "\e[33mWarning:\e[0m $1 script not found at $script"
  fi
}

# Check dependencies
check_dependencies() {
  local missing_deps=()

  for cmd in gh composer npm php valet; do
    if ! command -v "$cmd" &> /dev/null; then
      missing_deps+=("$cmd")
    fi
  done

  if [ ${#missing_deps[@]} -ne 0 ]; then
    echo -e "\e[31mERROR:\e[0m The following required dependencies are missing:"
    for dep in "${missing_deps[@]}"; do
      echo "  - $dep"
    done
    echo "Please install these dependencies and try again."
    exit 1
  fi
}

# Get valid project name
# Check if directory exists and handle appropriately
check_directory() {
  local dir="$1"

  if [ -d "$dir" ]; then
    echo -e "\n\e[31mWARNING:\e[0m $dir directory already exists. Would you like to delete it? (y/N)"
    read -r delete
    if [[ "$delete" =~ ^[Yy]$ ]]; then
      echo -e "Checking if GitHub repository exists..."
      if gh repo view "retinens/$dir" &> /dev/null; then
        echo -e "Deleting GitHub repository retinens/$dir..."
        if ! gh repo delete "retinens/$dir" --yes; then
          echo -e "\e[31mERROR:\e[0m Failed to delete GitHub repository."
          exit 1
        fi
      fi
      echo -e "Removing local directory $dir..."
      sudo rm -rf "$dir"
    else
      echo "Exiting"
      exit 0
    fi
  fi
}

# Create and clone GitHub repository
create_repository() {
  local name="$1"

  echo -e "\n\e[33mCreating\e[0m $name repository on GitHub..."

  if ! gh repo create "retinens/$name" -y --private --template retinens/stakhanov; then
    echo -e "\e[31mERROR:\e[0m Failed to create GitHub repository."
    exit 1
  fi

  # Wait for GitHub to fully create the repository
  echo -e "Waiting for repository to be ready..."
  sleep 5

  echo -e "Cloning repository..."
  if ! gh repo clone "retinens/$name" -- -q; then
    echo -e "\e[31mERROR:\e[0m Failed to clone the repository."
    exit 1
  fi

  cd "$name" || {
    echo -e "\e[31mERROR:\e[0m Failed to navigate to $name directory."
    exit 1
  }
}

# Setup Laravel project
setup_project() {
  echo -e "\n\e[33mSetting up\e[0m Laravel project..."

  echo -e "Copying .env.example to .env..."
  if ! cp .env.example .env; then
    echo -e "\e[31mERROR:\e[0m Failed to copy .env.example to .env."
    exit 1
  fi

  echo -e "Installing Composer dependencies..."
  if ! composer install --no-interaction --quiet --no-progress; then
    echo -e "\e[31mERROR:\e[0m Failed to install Composer dependencies."
    exit 1
  fi



  echo -e "Generating application key..."
  if ! php artisan key:generate; then
    echo -e "\e[31mERROR:\e[0m Failed to generate application key."
    exit 1
  fi

  echo -e "Installing npm packages..."
  if ! npm install --silent; then
    echo -e "\e[31mERROR:\e[0m Failed to install npm packages."
    exit 1
  fi

  echo -e "Building assets..."
  if ! npm run build --silent; then
    echo -e "\e[31mERROR:\e[0m Failed to build assets."
    exit 1
  fi
}

# Configure Laravel Valet
setup_valet() {
  echo -e "\n\e[33mSetting up\e[0m Valet..."

  echo -e "Creating database..."
  if ! valet db:create; then
    echo -e "\e[31mERROR:\e[0m Failed to create database."
    exit 1
  fi

  echo -e "Running migrations and seeders..."
  if ! php artisan migrate:fresh --seed; then
    echo -e "\e[31mERROR:\e[0m Failed to run migrations and seeders."
    exit 1
  fi

  echo -e "Securing site with HTTPS..."
  if ! valet secure; then
    echo -e "\e[31mERROR:\e[0m Failed to secure the site with HTTPS."
    exit 1
  fi

  echo -e "Opening project in browser..."
  if ! valet open; then
    echo -e "\e[31mWARNING:\e[0m Failed to open the site in browser."
  fi
}

# Open documentation
open_docs() {
  echo -e "\n\e[33mOpening\e[0m documentation..."

  # Use the appropriate command based on the OS
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    open "https://github.com/retinens/laravel-scripts/blob/master/afterCreatingWebsite.md"
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    if command -v xdg-open &> /dev/null; then
      xdg-open "https://github.com/retinens/laravel-scripts/blob/master/afterCreatingWebsite.md"
    else
      echo -e "\e[33mWarning:\e[0m Unable to open browser. Please visit: https://github.com/retinens/laravel-scripts/blob/master/afterCreatingWebsite.md"
    fi
  else
    echo -e "\e[33mWarning:\e[0m Unable to detect OS. Please visit: https://github.com/retinens/laravel-scripts/blob/master/afterCreatingWebsite.md"
  fi
}

# Keep sudo privileges alive throughout script execution
refresh_sudo() {
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$" || exit
  done 2>/dev/null &
}

# Main function
main() {
  display_banner
  load_env
  check_dependencies
  
  # Start sudo refresh in background after user has seen the banner
  refresh_sudo

  # Run utility scripts
  run_utility "check-updates"
  run_utility "rename-git-default"

  echo -n "Project name? (alphanumeric and dashes only): "  # Use echo -n to keep cursor on same line
  read -r projectname


  # Check if directory exists
  check_directory "$projectname"

  # Create and setup project
  create_repository "$projectname"
  setup_project
  setup_valet
  open_docs

  echo -e "\n\e[32mSuccess!\e[0m Project \e[33m$projectname\e[0m has been set up successfully."
}

# Run the main function
main
